version: '3.8'

# 开发环境 Docker Compose（集中于 deploy/dev 下）
# 仅包含基础设施，后端服务在 IDE 中运行

services:
  # Consul 服务注册中心
  consul:
    image: consul:1.17
    container_name: open436-consul-dev
    ports:
      - "8500:8500"    # HTTP API + UI
      - "8600:8600/udp" # DNS
    command: agent -server -ui -bootstrap-expect=1 -client=0.0.0.0
    networks:
      - open436-dev-network
    volumes:
      - consul-dev-data:/consul/data

  # PostgreSQL 数据库
  postgres:
    image: postgres:14-alpine
    container_name: open436-postgres-dev
    environment:
      POSTGRES_USER: open436
      POSTGRES_PASSWORD: open436
      POSTGRES_DB: open436
    ports:
      - "5432:5432"
    networks:
      - open436-dev-network
    volumes:
      - postgres-dev-data:/var/lib/postgresql/data
      # 注意：相对路径基于 deploy/dev 目录，只在首次初始化（空数据卷）时执行
      - ./db-init/00-run-migrations.sh:/docker-entrypoint-initdb.d/00-run-migrations.sh
      - ../../Open436-Auth/src/main/resources/db/migration:/docker-entrypoint-initdb.d/auth_migrations:ro
      - ../../Open436-FileService/migrations:/docker-entrypoint-initdb.d/file_migrations:ro

  # Redis 缓存
  redis:
    image: redis:7-alpine
    container_name: open436-redis-dev
    ports:
      - "6379:6379"
    networks:
      - open436-dev-network

  # Minio 对象存储
  minio:
    image: minio/minio:latest
    container_name: open436-minio-dev
    ports:
      - "9000:9000"   # API
      - "9001:9001"   # Console
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    command: server /data --console-address ":9001"
    networks:
      - open436-dev-network
    volumes:
      - minio-dev-data:/data

  # Kong 数据库
  kong-database:
    image: postgres:14-alpine
    container_name: kong-database-dev
    environment:
      POSTGRES_USER: kong
      POSTGRES_PASSWORD: kong
      POSTGRES_DB: kong
    ports:
      - "5433:5432"  # 避免与主数据库端口冲突
    networks:
      - open436-dev-network
    volumes:
      - kong-dev-data:/var/lib/postgresql/data

  # Kong 迁移
  kong-migration:
    image: kong:3.4
    command: kong migrations bootstrap
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong
    depends_on:
      - kong-database
    networks:
      - open436-dev-network
    restart: on-failure

  # Kong Gateway
  kong:
    image: kong:3.4
    container_name: open436-kong-dev
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
      # 使用 Google DNS，避免依赖 Consul DNS
      KONG_DNS_RESOLVER: 8.8.8.8
    ports:
      - "8000:8000"  # Proxy
      - "8443:8443"  # Proxy SSL
      - "8001:8001"  # Admin API
    depends_on:
      - kong-migration
      - consul
    networks:
      - open436-dev-network
    extra_hosts:
      # Windows Docker Desktop 特性：允许容器访问宿主机
      - "host.docker.internal:host-gateway"
    volumes:
      # 注意：相对路径基于 deploy/dev 目录
      - ./kong/plugins:/usr/local/share/lua/5.1/kong/plugins/custom

volumes:
  consul-dev-data:
  postgres-dev-data:
  kong-dev-data:
  minio-dev-data:

networks:
  open436-dev-network:
    driver: bridge


